---
#- name: Provision Che for {{ item }}
#  shell: "oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-single-user.yml \
#  --param PROJECT_NAME={{ item }} \
#  --param DOMAIN_NAME={{ ocp_apps_domain }} \
#  --param OPENSHIFT_OAUTH_TOKEN={{ openshift_oauth_token }} \
#  | oc create -f - -n {{ item }}"
#  ignore_errors: true

- name: Provision Che for {{ item }}
  shell: "oc process -f https://raw.githubusercontent.com/epe105/minishift-addons/master/add-ons/che/templates/che-single-user.yml \
  --param PROJECT_NAME={{ item }} \
  --param DOMAIN_NAME={{ ocp_apps_domain }} \
  --param OPENSHIFT_OAUTH_TOKEN=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \
  | oc create -f - -n {{ item }}"
  ignore_errors: true

- name: Check if Che IDE is deployed
  uri:
    url: http://che-{{ item }}.{{ ocp_apps_domain }}/api/stack
    method: GET
  retries: 100
  delay: 20
  register: response
  until: response.status == 200
  changed_when: false

- name: Get Service Account OAuth Token
  shell: "oc sa get-token che -n {{ item }}"
  register: sa_response

- set_fact: openshift_oauth_token={{ sa_response.stdout }}

- debug: var=openshift_oauth_token

- name: Update openshift oauth token to service account
  shell: "oc patch configmaps che -p '{\"data\":{\"openshift-oauth-token\":\"{{ openshift_oauth_token }}\"}}' -n {{ item }}"

- name: Update custom stack to Che
  tags: install_custom_stack
  uri:
    url: http://che-{{ item }}.{{ ocp_apps_domain }}/api/stack
    method: POST
    return_content: yes
    body: |
        {
          "name": "Day in the life Workshop",
          "description": "Agile Integration developer Workshop",
          "scope": "general",
          "workspaceConfig": {
            "environments": {
              "default": {
                "recipe": {
                  "type": "dockerimage",
                  "content": "weimeilin/che-centos-jdk8"
                },
                "machines": {
                  "dev-machine": {
                    "env": {
                      "MAVEN_OPTS" : "-Xmx512m"
                    },
                    "servers": {
                      "8080/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8080"
                      },
                      "8000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8000"
                      },
                      "9000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9000"
                      },
                      "9001/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9001"
                      }
                    },
                    "volumes": {},
                    "installers": [
                      "org.eclipse.che.exec",
                      "org.eclipse.che.terminal",
                      "org.eclipse.che.ws-agent",
            					"org.eclipse.che.ls.camel"
                    ],
                    "attributes": {
                      "memoryLimitBytes": "4294967296"
                    }
                  }
                }
              }
            },
            "commands": [
              {
                "commandLine": "mvn install -f ${current.project.path}",
                "name": "Build project",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "mvn spring-boot:run -f ${current.project.path}",
                "name": "run spring-boot",
                "type": "mvn",
                "attributes": {
                  "goal": "Run",
                  "previewUrl": "${server.9000/tcp}"
                }
              },
              {
                "commandLine": "mvn camel-restdsl-swagger:generate -f ${current.project.path}",
                "name": "Generate REST DSL from Swagger",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "mvn generate-sources -f ${current.project.path}",
                "name": "run generate-sources",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "cd ${current.project.path} && mvn fabric8:deploy",
                "name": "fabric8:deploy",
                "type": "mvn",
                "attributes": {
                  "goal": "Deploy",
                  "previewUrl": ""
                }
              }
            ],
            "projects": [],
            "defaultEnv": "default",
            "name": "default",
            "links": []
          },
          "components": [
            {
              "version": "---",
              "name": "CentOS"
            },
            {
              "version": "1.8.0_45",
              "name": "JDK"
            },
            {
              "version": "3.2.2",
              "name": "Maven"
            },
            {
              "version": "3.10",
              "name": "OpenShift CLI"
            }
          ],
          "creator": "ide",
          "tags": [
            "Java",
            "JDK",
            "Maven",
            "CentOS",
            "Git"
          ],
          "id": "java-oc-day-in-life"
        }
    body_format: json
    status_code: 201

- name: Make sure we go back do default project
  shell: "oc set resources deploymentconfigs/che --limits=cpu=1,memory=4Gi --requests=cpu=200m,memory=512Mi -n {{ item }}"

#- name: Annotate the empty project as requested by user
#  shell: "oc annotate namespace {{ item }} openshift.io/requester={{ item }} --overwrite"

- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{ item }} requester={{ item }} --overwrite"
